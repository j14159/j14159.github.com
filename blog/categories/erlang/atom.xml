<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | NoisyCode]]></title>
  <link href="http://noisycode.com/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://noisycode.com/"/>
  <updated>2014-07-28T07:54:10-07:00</updated>
  <id>http://noisycode.com/</id>
  <author>
    <name><![CDATA[Jeremy Pierre]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eSpacewar Open Sourced]]></title>
    <link href="http://noisycode.com/blog/2013/03/09/espacewar-open-sourced/"/>
    <updated>2013-03-09T09:13:00-08:00</updated>
    <id>http://noisycode.com/blog/2013/03/09/espacewar-open-sourced</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/j14159/eSpacewar">GitHub link for the lazy</a></p>

<p><a href="http://esw.noisycode.com:8080/sw.html">Gameplay link for the lazy</a>, not guaranteed work <em>after</em> March 31, 2013</p>

<h2>What Is It?</h2>

<p>As <a href="http://noisycode.com/blog/2013/03/02/testing-erlang-spacewar/">mentioned previously</a>, I built an online multiplayer-only version of <a href="http://en.wikipedia.org/wiki/Spacewar!">Spacewar!</a> using <a href="http://erlang.org">Erlang</a> for all of the game logic and <a href="https://github.com/extend/cowboy">Cowboy</a> for websocket communication with clients.  The only client at present is a very simple HTML canvas one, <a href="https://github.com/j14159/eSpacewar/blob/master/priv/sw.html">here is a direct link</a>.</p>

<p><img class="<a" src="href="http://static.ow.ly/photos/original/1E7sr.png">http://static.ow.ly/photos/original/1E7sr.png</a>"></p>

<h2>Why?</h2>

<h3>The Basics</h3>

<p>I wanted to validate a couple of choices for building simple things requiring:</p>

<ul>
<li>the communication of some universal state to clients on a rapid basis</li>
<li>changing that state based on input from a variety of clients</li>
</ul>


<p>Looks like a game, sounds like a game but applicable to a lot of other stuff.</p>

<h3>Learning Erlang</h3>

<p>Aside from my (so-far) abortive attempt to build a <a href="https://github.com/j14159/PawnShop">URL-shortener</a>, I haven&rsquo;t found an excuse to really dig into Erlang yet.  At the same time, I have been thinking for a while about the possibility of simple games via websockets.  The concurrency and responsiveness requirements for something like this make Erlang a natural choice.</p>

<h3>More With Websockets</h3>

<p>They&rsquo;re still sort of stuck in standards-hell and probably not as good as they could be but I wanted to try them out in more depth.  I didn&rsquo;t consider comet for this because the nature of Spacewar requires a lot of small, rapid updates and I <em>suspected</em> (but cannot yet confirm) that the repeated connection setup overhead <em>might</em> negatively impact this.</p>

<p><strong>In actual fact</strong>, my assumption/suspicion is extremely likely to be <strong>totally wrong</strong> for the scope of this project.  It probably only makes a difference at an extremely high rate of messages (eSpacewar does a minimum of 20/second to each client) which I&rsquo;m obviously not dealing with here.</p>

<h3>Derp Cloud Derp</h3>

<p>This one&rsquo;s easy.  I just wanted to see if a tiny EC2 node could actually handle it.  It mostly can but the t1.micro it&rsquo;s hosted on now tends to stutter occassionally.</p>

<h2>What I Liked</h2>

<h3>Erlang</h3>

<p>I could probably go on forever about this (but won&rsquo;t here).  A few specific points that I ended up really loving:</p>

<ul>
<li>Pattern matching permeates <em>everything</em> to the point that if/then/else just seems medieval.</li>
<li>So easy to avoid shared state.  You just don&rsquo;t have any option (slight lie, go with it) so it makes things easier to keep clean.</li>
<li>Clean, simple and minimal.  The core is so small and the emphasis on recursion so high that you&rsquo;re naturally pushed to composability (although you&rsquo;ll likely find gross contradictions in my code).</li>
</ul>


<p>I didn&rsquo;t actually make much use of supervision so can&rsquo;t comment on that yet (but love it in the Akka/Scala world).</p>

<h3>Turns Out People Like It</h3>

<p>Who knew?  Simple gameplay, easy to drop in and low requirements.  I&rsquo;ve seen some great 10 player moments of mayhem.  Would have liked to see more but I think it would make playing almost impossible due to the number of torpedoes flying around.</p>

<h2>What I Screwed Up</h2>

<p>This is a non-exhaustive list, see code and comments for more but these are the big things I <em>think</em> I could have done better.  Please feel free to hit me up with agreements/disagreements and suggestions on <a href="http://twitter.com/j14159">Twitter</a> or in the comments.</p>

<h3>Unit Tests</h3>

<p>There aren&rsquo;t any.  I pretty much just slammed through this project to get things working and learn what I could.</p>

<h3>Collision Detection</h3>

<p>Collision detection occurs <em>after</em> an entity (torpedo, player) has been moved and is based on points in space.  This means that if players and/or torpedoes are moving quickly, they can appear to pass through each other.  This could be solved by using line segments to see if paths cross.</p>

<p>A further issue is that the server side has no concept of the ship&rsquo;s shape.  It considers a ship to be a point with a certain bounding area and only registers a collision if two entities overlap.</p>

<h3>handle_info</h3>

<p>My gen_server and gen_fsm implementations (see <a href="https://github.com/j14159/eSpacewar/blob/master/src/space.erl">space.erl</a> and <a href="https://github.com/j14159/eSpacewar/blob/master/src/player.erl">player.erl</a> respectively for examples) could possibly be simplified a bit by using handle_info over handle_cast or specific states in some cases.  More importantly, this may have made the move from basic processes to gen_server and gen_fsm a little easier.</p>

<p>I would most definitely welcome opinions for and/or against the above, I clearly still have a lot to learn.</p>

<h3>Records</h3>

<p>I ended up not using records (just haven&rsquo;t looked closely at them yet) and used tuples everywhere.  I suspect I may have been able to simplify some state by using these but am unsure of how this would impact some of my pattern matching use.  I&rsquo;m aware they&rsquo;re an extension of tuples but don&rsquo;t know if this enforces a certain structure.  An area for futher exploration.</p>

<h3>Client</h3>

<p>I&rsquo;m clearly not an experienced JavaScript developer and need improvement (the playing space size is hard-coded, bad).  One of the areas I <em>wanted</em> to get into but didn&rsquo;t is WebGL but I&rsquo;ll leave that for later.</p>

<h2>Conclusions</h2>

<p>I put this into a repo at a fairly early state so you will be able to dig back and see the progression (it was much uglier before).</p>

<p>As a result of this project, I&rsquo;m confident enough with Erlang (and Cowboy) to start applying it to some more advanced/involved things so I&rsquo;m going to push on with some new projects.  I&rsquo;ll undoubtably be posting progress on those at some time soon.</p>

<p>The problems above, unfortunately, likely won&rsquo;t get fixed.  I&rsquo;ve essentially learned what I set out to and eSpacewar has served well for that process.  Feel free to fork/host/modify, I&rsquo;d appreciate a link to this blog if you decide to host it (or some derivative) somewhere else.</p>

<p>Comments/criticism most welcome on <a href="http://twitter.com/j14159">Twitter</a> and in the comments below.  I&rsquo;ll consider pull requests on GitHub but don&rsquo;t really want to mess with this too much further (feel free to fork and fix/extend).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Erlang Spacewar]]></title>
    <link href="http://noisycode.com/blog/2013/03/02/testing-erlang-spacewar/"/>
    <updated>2013-03-02T15:31:00-08:00</updated>
    <id>http://noisycode.com/blog/2013/03/02/testing-erlang-spacewar</id>
    <content type="html"><![CDATA[<h2>What&rsquo;s Erlang Spacewar?</h2>

<p>A multiplayer version of <a href="http://en.wikipedia.org/wiki/Spacewar!">Spacewar!</a> built in <a href="http://erlang.org">Erlang</a> with <a href="https://github.com/extend/cowboy">Cowboy</a> using websockets.  For the moment, it&rsquo;s quite basic and really intended to be a proof-of-concept.  The idea was to see if it is even <em>possible</em> to use websockets for this sort of thing.</p>

<p>Right now I&rsquo;m just trying to get a sense of how it performs on a tiny little EC2 VM so I&rsquo;d be most grateful if you could grab a couple friends and jump in when you have a few minutes to spare.  Fair warning:  I fully expect it to fall over and die if there are more than 50 or so people in there but I guess we&rsquo;ll find out.</p>

<p>I&rsquo;ll give you the link to play, don&rsquo;t worry, just a couple quick things&hellip;</p>

<h2>How Long Will It Work For?</h2>

<p>I&rsquo;m going to keep it live (aside from crashes, etc) for at least a couple of weeks I think.</p>

<h2>What You Need:</h2>

<p>A browser that supports websockets and HTML canvas.  Think recent versions of Chrome and Firefox, Safari <em>should</em> work.</p>

<h2>Problems You Can Expect</h2>

<h3>It&rsquo;s Ugly</h3>

<p>And I know.  No explosions yet, very minimal.</p>

<h3>It&rsquo;s Choppy Sometimes</h3>

<p>It&rsquo;s running on a t1.micro in Amazon EC2&rsquo;s us-east-1 region.</p>

<p><strong>Translation</strong>:  it&rsquo;s got less than a full CPU core (really just uses spare cycles from other bigger VMs) and it&rsquo;s in Virginia so if you&rsquo;re on the West coast like me, expect some lag.</p>

<h3>Crashes/Termination</h3>

<p>I&rsquo;ll be messing with the code for the next week so do expect unavailability due to upgrades and crashes.</p>

<h2>Please Do</h2>

<h3>Play it and tell me what you think</h3>

<p>I know about choppiness and ugliness but if you find any other frustrating bits (or even stuff you love), please do tell me in the comments or on <a href="http://twitter.com/j14159">Twitter</a>.</p>

<h3>Share the link</h3>

<p>But please share the link to this blog post &ndash; I&rsquo;d like to give all test players the same warnings/notes I&rsquo;m giving you.</p>

<h2>Are You Going To Release The Source?</h2>

<p>Yes.  It&rsquo;ll be reasonably open (probably BSD or MIT license) on my <a href="https://github.com/j14159">github account</a> within a couple of weeks.  I&rsquo;m still cleaning things up and moving to gen_server/proper OTP instead of bare Erlang processes.</p>

<p>For the record, the repository will contain the grim history of almost all my mistakes.  It&rsquo;s been a learning experience.</p>

<h1>Shut Up And Let Me Play!</h1>

<p>Of course.  Here&rsquo;s the game, don&rsquo;t forget to enter a username and click &ldquo;Start Playing&rdquo;:  <a href="http://esw.noisycode.com:8080/sw.html">Erlang Websocket Spacewar!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Erlang + Clojure For Some Good]]></title>
    <link href="http://noisycode.com/blog/2012/10/21/pawnshop-in-which-i-learn-erlang-and-clojure-for-some-good/"/>
    <updated>2012-10-21T17:22:00-07:00</updated>
    <id>http://noisycode.com/blog/2012/10/21/pawnshop-in-which-i-learn-erlang-and-clojure-for-some-good</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>Since pretty much everything I do at my <a href="http://twitter.com/hootsuite">day job</a> involves Akka and Scala, Erlang&rsquo;s been on my radar for quite a while.  Using RabbitMQ in current products and considering Riak to solve some nasty storage issues has of course heightened my interest in it as well.  Thanks to <a href="http://twitter.com/ujm">@ujm</a> and <a href="http://twitter.com/tavisrudd">@tavisrudd</a> I&rsquo;ve also been hearing a lot about Clojure for the past year or so and it has (not so) mysteriously turned up in a few testing tools at the aforementioned day job due to <a href="http://twitter.com/ujm">@ujm</a>&rsquo;s unbridled love for it.  As I&rsquo;ve been trying to improve my own approach to and understanding of functional programming, it seemed both natural and frankly exciting to dive into something involving both.</p>

<h2>The Pitfall</h2>

<p>This brings up a minor pet peeve of mine:  while evaluating something new and interesting, people often come up with trivial example projects and in the past, I&rsquo;ve been possibly more guilty than most.  This is something I want very much to avoid now.  The problems I&rsquo;ve seen in myself with using something <em>too</em> trivial to evaluate and learn new things are:</p>

<ul>
<li>performance assumptions are never grounded in reality when your code doesn&rsquo;t do anything realistic.  A perfect example is testing concurrent websocket connection limits that simply echo input (I did this with Play! 2.0 and I&rsquo;ve seen some naive numbers from the node.js crowd mentioned lately as well).</li>
<li>simple projects rarely expose some of the strange corners of a language or platform.  Anyone who has extensively used Scala&rsquo;s implicits or made extensive use of futures and promises will understand this.</li>
<li>most importantly overly trivial projects won&rsquo;t expose your <strong>own</strong> weaknesses and misunderstandings early on.</li>
</ul>


<h2>Some Goals</h2>

<p>Given the above, there are a few specific challenges I&rsquo;m looking to work on with this project in both Erlang and Clojure:</p>

<ul>
<li>unique ID generation without a central locking resource.  I want to be able to establish total ordering without any central coordination.  <em>Loose</em> temporal ordering is a nice to have.</li>
<li>horizontal scale, add and remove additional resources with no coordination required beyond some configuration.  As long as nodes can get in touch with the database, they should continue to function.</li>
</ul>


<p>And I have a few goals specific to Clojure and Erlang:</p>

<ul>
<li>learn to use their build tools (Leiningen and Rebar)</li>
<li>loosen my reliance on object orientation</li>
<li>get more comfortable with dynamic typing (I tend to yell a lot about the supremacy of static typing).</li>
<li>experiment with a heterogeneous solution.  I&rsquo;ll be building the same thing in both languages so I think some interesting comparisons could arise with regard to things like deployment, configuration and performance.</li>
</ul>


<p>Naturally I&rsquo;m going to make a few rules for myself, the first and most important being that I&rsquo;m not going to hide my mistakes.  When I change my mind or screw up, all the details will be in the commit history.  Second, the whole thing will be open source so that anyone will be able to see my pace, changes and progress in github at any time.
Lastly, I&rsquo;ll welcome feedback and optimization suggestions(with credit given where credit is due) but won&rsquo;t accept pull requests or massive rewrites from anyone &ndash; this is mine to learn and mess up.</p>

<h2>The Actual Project</h2>

<p>I&rsquo;m going to build a simple URL shortener and image hosting service called <a href="http://github.com/j14159/PawnShop">PawnShop</a> with the following basic features:</p>

<ul>
<li>exchange a URL for a short hash</li>
<li>redirect short URLs to originals</li>
<li>upload an image (png/jpeg) in return for a short hash</li>
<li>redirect HTTP requests for a URL hash to the original</li>
<li>display the matching submitted image for a given requested hash</li>
<li>track click stats for each hash generated.  I&rsquo;ll store these at millisecond resolution.</li>
<li>display hosted images inside a minimal template</li>
<li>provide a REST API to retrieve click stats, likely report by one hour intervals at the smallest at first.</li>
<li>basic authentication via email address and password</li>
</ul>


<p>The nice-to-have features will be:</p>

<ul>
<li>click stat reports/graphs with D3.js</li>
<li>pluggable authentication</li>
</ul>


<p>The basic technical bits:</p>

<ul>
<li>This will be a single monolithic project, no interdependent services.</li>
<li>It will be heterogeneous in that I want to be able to run the Erlang version side by side with the Clojure version in the same cluster, off the same database, behind the same load balancer and things should Just Work &trade;.</li>
<li>I&rsquo;m going to use standard web frameworks, likely <a href="http://webnoir.org">Noir</a> and either <a href="http://chicagoboss.org">Chicago Boss</a> or <a href="http://nitrogenproject.com">Nitrogen</a></li>
<li>The only data store I&rsquo;ll be using is Riak.</li>
</ul>


<h2>Following Along</h2>

<p>I&rsquo;m going to aim for roughly a post-per-week here.  Blog posts related to PawnShop will essentially be a notebook/journal of my reasoning for certain decisions as well as both negative and positive experiences throughout the learning and development process.</p>

<p><a href="http://github.com/j14159/PawnShop"><strong>GitHub</strong></a></p>

<p><a href="https://trello.com/board/pawnshop/5084584abfe3e0931a00fdce"><strong>Trello</strong></a></p>

<h2>Riak and the Data Model</h2>

<p>A while ago, <a href="http://twitter.com/jamesgolick">@jamesgolick</a> told me I wasn&rsquo;t allowed to use Riak until I had read the famous Dynamo paper in its entirety.  He&rsquo;s right, and you should <a href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf">read it too</a> if you haven&rsquo;t yet.</p>

<p>A URL shortener model seems a great fit for an eventually consistent Dynamo-style store like Riak.</p>

<ul>
<li>To shorten URLs and host pictures, you want high consistency for DB writes meaning that when a user submits new data, you want the write to complete with reasonable certainty.</li>
<li>To retrieve URLs, low read consistency (small quorum) is OK.  Since we&rsquo;re not <strong>mutating</strong> URL and picture entries, we don&rsquo;t have to worry about an update that might not have hit replicas yet.</li>
<li>To add and retrieve click stats, low read and write consistency is fine.  Missing one or two clicks out of thousands for a single report isn&rsquo;t the end of the world, we just want reasonable accuracy when the stats are requested and eventually high accuracy.  If it takes a few hours for this to happen, so be it.</li>
</ul>


<h2>Assumptions/Dependencies</h2>

<h3>statsd</h3>

<p>Since I&rsquo;m going to monitor the hell out of everything, I&rsquo;ll assume something statsd-compatible is available wherever this project runs.  These days I don&rsquo;t think this is really an option at all for any sort of sane environment.</p>

<h2>Next Steps</h2>

<p>The next few posts will likely cover the following topics:</p>

<ul>
<li>decentralized ID/hash generation</li>
<li>Riak model for shortened links and picture data</li>
<li>Riak model for click stats</li>
</ul>


<p>But those could change at any time.</p>

<p>Comments/questions always welcome on <a href="http://twitter.com/j14159">Twitter</a></p>
]]></content>
  </entry>
  
</feed>
